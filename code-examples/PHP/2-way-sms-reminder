<?php
/*
 * Reminder System using 46elks API and the `at` command (Linux-based scheduler)
 *
 * This script is designed to receive incoming SMS messages through the 46elks API,
 * extract the reminder details (content and time), and schedule the reminder using the
 * Linux `at` command.
 *
 * Workflow:
 * 1. The user sends an SMS in the format: Content:"Your message" Time: HH:MMh DD-MM-YYYY
 * 2. The script extracts the content and time from the message.
 * 3. It then schedules a reminder for the specified time using the `at` command.
 * 4. If the time has already passed, an error message is sent back to the user.
 * 5. If the message format is invalid, an error message is sent back to the user.
 * 
 * Prerequisites:
 * - The `at` command must be installed on your Linux system.
 * - The web server user (usually `www-data` on Ubuntu) must have permission to use the `at` command.
 * - Make sure `reminder_log.txt` is writable by the web server.
 */

// Function to send an SMS using the 46elks API
function sendSMS($sms) {
    $username = 'xxxxx';  // 46elks API username
    $password = 'xxxxx';  // 46elks API password

    $context = stream_context_create(array(
        'http' => array(
            'method'  => 'POST',
            'header'  => "Authorization: Basic " . base64_encode($username.':'.$password) . "\r\n" .
                         "Content-type: application/x-www-form-urlencoded\r\n",
            'content' => http_build_query($sms),
            'timeout' => 5
    )));

    return false !== file_get_contents('https://api.46elks.com/a1/SMS', false, $context);
}

// Function to schedule the reminder using the `at` command
function scheduleReminder($from, $content, $scheduleTime) {
    $logEntry = "Reminder: $content - To: $from - Scheduled for: $scheduleTime\n";
    file_put_contents('reminder_log.txt', $logEntry, FILE_APPEND | LOCK_EX);

    // Ensure time is formatted correctly for `at` (e.g., 'HH:MM MM/DD/YYYY')
    $formattedReminderTime = DateTime::createFromFormat('H:i d-m-Y', $scheduleTime)->format('H:i M d, Y');
    
    // Schedule the reminder using the `at` command
    $command = "echo 'php send_reminder.php $from \"$content\"' | at \"$formattedReminderTime\"";
    exec($command, $output, $return_var);

    // Log the output and return code for debugging
    error_log("Command output: " . implode("\n", $output));
    error_log("Command return code: $return_var");
}

// Function to handle incoming messages, extract reminder details, and schedule the reminder
function handleIncomingMessage($from, $message) {
    $normalizedMessage = strtolower(preg_replace(['/[\n,]/', '/[“”]/'], [' ', '"'], $message));
    error_log("Normalized message: $normalizedMessage");

    $regex = '/content\s*[":\s]*(.*?)\s*time\s*[:\s]*(\d{2}:\d{2})h\s*(\d{2}-\d{2}-\d{4})/i';
    error_log("Regex being used: $regex");

    if (preg_match($regex, $normalizedMessage, $matches)) {
        error_log("Captured content: " . $matches[1]);
        error_log("Captured time: " . $matches[2]);
        error_log("Captured date: " . $matches[3]);

        $content = trim($matches[1], ' "');  // Remove extra spaces and quotes
        $time = $matches[2];
        $date = $matches[3];

        $scheduleDateTime = DateTime::createFromFormat('d-m-Y H:i', "$date $time");
        $currentDateTime = new DateTime();

        if ($scheduleDateTime < $currentDateTime) {
            sendSMS([
                'from' => '+xxxxxxxxxxx',
                'to' => $from,
                'message' => "The time you set for the reminder ($time on $date) has already passed. Please choose a future time."
            ]);
            return;
        }

        $formattedReminderTime = $scheduleDateTime->format('H:i d-m-Y');
        scheduleReminder($from, $content, $formattedReminderTime);

        sendSMS([
            'from' => '+xxxxxxxxxxx',
            'to' => $from,
            'message' => "Reminder \"$content\" has been registered. This message will be sent to you at $formattedReminderTime."
        ]);
    } else {
        error_log("Message format did not match. Input message: $message");
        sendSMS([
            'from' => '+xxxxxxxxxxx',
            'to' => $from,
            'message' => 'Invalid format. Please provide: Content "<your message>" Time "<HH:MM>h <DD-MM-YYYY>".'
        ]);
    }
}

if (isset($_POST['from']) && isset($_POST['message'])) {
    $from = $_POST['from'];
    $message = trim($_POST['message']);
    handleIncomingMessage($from, $message);
} else {
    error_log('Missing "from" or "message" in POST data.');
}

?>
